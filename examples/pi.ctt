module pi where

import prelude
import equiv

              -----------------------------------
              -- Example: Equality in pi types --
              -----------------------------------

pi (A:U) (P:A->U) : U = (x:A) -> P x

idPi (A:U) (B:A->U) (f g : pi A B) : Id U (Id (pi A B) f g) ((x:A) -> Id (B x) (f x) (g x)) =
 isoId  (Id (pi A B) f g) ((x:A) -> Id (B x) (f x) (g x)) F G S T
 where T0 : U = Id (pi A B) f g
       T1 : U = (x:A) -> Id (B x) (f x) (g x)
       F (p:T0) : T1 = \ (x:A) -> <i>p@i x
       G (p:T1) : T0 = <i>\ (x:A) -> p x @ i
       S (p:T1) : Id T1 (F (G p)) p = refl T1 p
       T (p:T0) : Id T0 (G (F p)) p = refl T0 p

setPi (A:U) (B:A -> U) (h:(x:A) -> set (B x)) (f g:pi A B) : prop (Id (pi A B) f g) =
 rem
 where
  T : U = (x:A) -> Id (B x) (f x) (g x)
  rem1 : prop T = \ (p q : T) -> <i> \ (x:A) -> h x (f x) (g x) (p x) (q x)@i

  rem : prop (Id (pi A B) f g) =
    subst U prop T (Id (pi A B) f g) (<i>idPi A B f g@-i) rem1

groupoidPi (A:U) (B:A -> U) (h:(x:A) -> groupoid (B x)) (f g:pi A B) : set (Id (pi A B) f g) =
    subst U set  T  (Id (pi A B) f g) (<i>idPi A B f g@-i) rem1
 where
  T : U = (x:A) -> Id (B x) (f x) (g x)
  rem1 : set T =  setPi A (\ (x:A) -> Id (B x) (f x) (g x)) (\ (x:A) -> h x (f x) (g x))



